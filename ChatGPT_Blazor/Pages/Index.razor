@page "/"
@using ChatGPT_Blazor.Interfaces.Services;
@using OpenAI.GPT3.ObjectModels.RequestModels;
@using OpenAI.GPT3.ObjectModels.ResponseModels;
@inject IChatService ChatService;

<PageTitle>Index</PageTitle>

<RadzenText TextStyle="TextStyle.DisplayH1" TagName="TagName.H1">Chat AI!</RadzenText>

<RadzenCard class="mt-3">
    <RadzenStack Orientation="Orientation.Vertical">
        @foreach (var message in chatMessages.Where(w => !w.Role.Equals("system")))
        {
            @if (message.Role.Equals("assistant"))
            {
                <RadzenStack class="w-100">
                    <RadzenStack>
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenIcon Icon="school" Style="color:var(--rz-info-darker);" />Assistant
                        </RadzenStack>
                        <RadzenCard class="rz-background-color-info-lighter" Style="width:fit-content">
                            @message?.Content
                        </RadzenCard>
                    </RadzenStack>
                </RadzenStack>
            }
            else
            {
                <RadzenStack class="w-100">
                    <RadzenStack>
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenIcon Icon="perm_identity" Style="color:var(--rz-success-darker);" />You
                        </RadzenStack>
                        <RadzenCard class="rz-background-color-success-lighter" Style="width:fit-content" >
                            @message?.Content
                        </RadzenCard>
                    </RadzenStack>
                </RadzenStack>
            }
        }
        @if (isChatting)
        {
            <RadzenStack>
                <RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenIcon Icon="school" Style="color:var(--rz-info-darker);" />Assistant
                    </RadzenStack>
                    <RadzenCard class="rz-background-color-info-lighter" >
                        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Info" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    </RadzenCard>
                </RadzenStack>
            </RadzenStack>
        }
    </RadzenStack>
</RadzenCard>

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" class="mt-3 w-100">
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" class="w-75">
        <RadzenTextArea @bind-Value=@chatMessage class="w-100" Placeholder="Send messaga"/>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="GetChatCompletion" Text="Send" Style="width:120px" Disabled=@isChatting />
    </RadzenStack>
</RadzenStack>

@code {
    private string chatMessage { get; set; } = string.Empty;

    private bool isChatting { get; set; } = false;

    private List<ChatMessage> chatMessages { get; set; } = new List<ChatMessage>()
    {
        ChatMessage.FromSystem("You are a helpful assistant."),
        ChatMessage.FromAssistance("Hello? Can I help you?"),
    };

    private ChatCompletionCreateResponse? chatCompletionCreateResponse;

    private async Task GetChatCompletion()
    {
        isChatting = true;
        chatMessages.Add(ChatMessage.FromUser(chatMessage));
        chatMessage = string.Empty;

        chatCompletionCreateResponse = await ChatService.Chat(chatMessages);

        if (chatCompletionCreateResponse is null)
        {
            return;
        }

        chatMessages.Add(chatCompletionCreateResponse.Choices[0].Message);
        isChatting = false;
    }
}